"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.candidateRouter = void 0;
/* istanbul ignore file */
const express_1 = __importDefault(require("express"));
const change_location_time_1 = __importDefault(require("../controllers/change-location-time/change-location-time"));
const booking_confirmation_1 = __importDefault(require("../controllers/booking-confirmation/booking-confirmation"));
const candidate_details_1 = __importDefault(require("../controllers/candidate-details/candidate-details"));
const support_alert_1 = __importDefault(require("../controllers/support-alert/support-alert"));
const choose_appointment_1 = __importDefault(require("../controllers/choose-appointment/choose-appointment"));
const choose_support_1 = __importDefault(require("../controllers/choose-support/choose-support"));
const cookie_policy_1 = __importDefault(require("../controllers/cookie-policy/cookie-policy"));
const email_contact_1 = __importDefault(require("../controllers/email-contact/email-contact"));
const find_test_centre_1 = __importDefault(require("../controllers/find-test-centre/find-test-centre"));
const test_language_1 = __importDefault(require("../controllers/test-language/test-language"));
const test_type_1 = __importDefault(require("../controllers/test-type/test-type"));
const received_support_request_1 = __importDefault(require("../controllers/received-support-request/received-support-request"));
const voiceover_1 = __importDefault(require("../controllers/voiceover/voiceover"));
const check_your_answers_1 = __importDefault(require("../controllers/check-your-answers/check-your-answers"));
const booking_exists_1 = __importDefault(require("../controllers/booking-exists/booking-exists"));
const payment_confirmation_1 = __importDefault(require("../controllers/payment-confirmation/payment-confirmation"));
const payment_initiation_1 = __importDefault(require("../controllers/payment-initiation/payment-initiation"));
const payment_confirmation_loading_1 = __importDefault(require("../controllers/payment-confirmation-loading/payment-confirmation-loading"));
const british_sign_language_1 = __importDefault(require("../controllers/british-sign-language/british-sign-language"));
const select_date_1 = __importDefault(require("../controllers/select-date/select-date"));
const select_test_centre_1 = __importDefault(require("../controllers/select-test-centre/select-test-centre"));
const check_your_details_1 = __importDefault(require("../controllers/check-your-details/check-your-details"));
const custom_support_1 = __importDefault(require("../controllers/custom-support/custom-support"));
const leaving_nsa_1 = __importDefault(require("../controllers/leaving-nsa/leaving-nsa"));
const preferred_day_1 = __importDefault(require("../controllers/preferred-day/preferred-day"));
const preferred_location_1 = __importDefault(require("../controllers/preferred-location/preferred-location"));
const select_support_type_1 = __importDefault(require("../controllers/select-support-type/select-support-type"));
const select_standard_support_1 = __importDefault(require("../controllers/select-standard-support/select-standard-support"));
const confirm_support_1 = __importDefault(require("../controllers/confirm-support/confirm-support"));
const staying_nsa_1 = __importDefault(require("../controllers/staying-nsa/staying-nsa"));
const telephone_contact_1 = __importDefault(require("../controllers/telephone-contact/telephone-contact"));
const translator_1 = __importDefault(require("../controllers/translator/translator"));
const voicemail_1 = __importDefault(require("../controllers/voicemail/voicemail"));
const duplicate_support_request_1 = __importDefault(require("../controllers/duplicate-support-request/duplicate-support-request"));
const error_timeout_1 = __importDefault(require("../controllers/error-timeout/error-timeout"));
const error_technical_1 = __importDefault(require("../controllers/error-technical/error-technical"));
const accessibility_statement_1 = __importDefault(require("../controllers/accessibility-statement/accessibility-statement"));
const privacy_policy_1 = __importDefault(require("../controllers/privacy-policy/privacy-policy"));
const internationalisation_1 = require("../middleware/internationalisation");
const setup_session_1 = require("../middleware/setup-session");
const set_target_1 = require("../middleware/set-target");
const request_validator_1 = require("../middleware/request-validator");
const error_handler_1 = require("../middleware/error-handler");
const auth_1 = require("../middleware/auth");
const set_context_1 = require("../middleware/set-context");
const payment_redirect_1 = require("../middleware/payment-redirect");
exports.candidateRouter = express_1.default.Router();
exports.candidateRouter.get(["/", "/choose-support"], setup_session_1.setupSession, set_target_1.setTarget, internationalisation_1.internationalisation, set_context_1.setContext, auth_1.startAuth, choose_support_1.default.get);
exports.candidateRouter.post(["/choose-support"], auth_1.startAuth, request_validator_1.validateRequest(choose_support_1.default.postSchemaValidation()), choose_support_1.default.post);
exports.candidateRouter.get(["/support-alert"], auth_1.startAuth, support_alert_1.default.get);
exports.candidateRouter.post(["/support-alert"], auth_1.startAuth, support_alert_1.default.post);
exports.candidateRouter.get(["/candidate-details"], auth_1.startAuth, candidate_details_1.default.get);
exports.candidateRouter.post(["/candidate-details"], auth_1.startAuth, request_validator_1.validateRequest(candidate_details_1.default.postSchemaValidation), error_handler_1.asyncErrorHandler(candidate_details_1.default.post));
exports.candidateRouter.get(["/email-contact"], auth_1.standardAuth, email_contact_1.default.get);
exports.candidateRouter.post(["/email-contact"], auth_1.standardAuth, request_validator_1.validateRequest(email_contact_1.default.postSchemaValidation()), email_contact_1.default.post);
exports.candidateRouter.get(["/test-type"], auth_1.commonAuth, error_handler_1.asyncErrorHandler(test_type_1.default.get));
exports.candidateRouter.post(["/test-type"], auth_1.commonAuth, request_validator_1.validateRequest(test_type_1.default.postSchemaValidation), error_handler_1.asyncErrorHandler(test_type_1.default.post));
exports.candidateRouter.get(["/received-support-request"], auth_1.commonAuth, received_support_request_1.default.get);
exports.candidateRouter.get(["/test-language"], auth_1.commonAuth, test_language_1.default.get);
exports.candidateRouter.post(["/test-language"], auth_1.commonAuth, request_validator_1.validateRequest(test_language_1.default.testLanguagePostSchema()), test_language_1.default.post);
exports.candidateRouter.get(["/select-standard-support"], auth_1.commonAuth, select_standard_support_1.default.get);
exports.candidateRouter.post(["/select-standard-support"], auth_1.commonAuth, request_validator_1.validateRequest(select_standard_support_1.default.postSchemaValidation()), select_standard_support_1.default.post);
exports.candidateRouter.get(["/change-voiceover"], auth_1.standardAuth, voiceover_1.default.get);
exports.candidateRouter.post(["/change-voiceover"], auth_1.standardAuth, request_validator_1.validateRequest(voiceover_1.default.voiceoverPostSchema()), voiceover_1.default.post);
exports.candidateRouter.get(["/find-test-centre"], auth_1.standardAuth, find_test_centre_1.default.get);
exports.candidateRouter.post(["/find-test-centre"], auth_1.standardAuth, request_validator_1.validateRequest(find_test_centre_1.default.postSchemaValidation), find_test_centre_1.default.post);
exports.candidateRouter.get(["/select-test-centre"], auth_1.standardAuth, request_validator_1.validateRequest(select_test_centre_1.default.getSchemaValidation()), error_handler_1.asyncErrorHandler(select_test_centre_1.default.get));
exports.candidateRouter.post(["/select-test-centre"], auth_1.standardAuth, request_validator_1.validateRequest(select_test_centre_1.default.postSchemaValidation()), error_handler_1.asyncErrorHandler(select_test_centre_1.default.post));
exports.candidateRouter.get(["/select-date"], auth_1.standardAuth, select_date_1.default.get);
exports.candidateRouter.post(["/select-date"], auth_1.standardAuth, request_validator_1.validateRequest(select_date_1.default.postSchemaValidation), select_date_1.default.post);
exports.candidateRouter.get(["/choose-appointment"], auth_1.standardAuth, request_validator_1.validateRequest(choose_appointment_1.default.getSchemaValidation), error_handler_1.asyncErrorHandler(choose_appointment_1.default.get));
exports.candidateRouter.post(["/choose-appointment"], auth_1.standardAuth, request_validator_1.validateRequest(choose_appointment_1.default.postSchemaValidation), error_handler_1.asyncErrorHandler(choose_appointment_1.default.post));
exports.candidateRouter.get(["/check-your-answers"], auth_1.standardAuth, check_your_answers_1.default.get);
exports.candidateRouter.post(["/check-your-answers"], auth_1.standardAuth, error_handler_1.asyncErrorHandler(check_your_answers_1.default.post));
exports.candidateRouter.get(["/booking-exists"], auth_1.standardAuth, booking_exists_1.default.get);
exports.candidateRouter.get(["/bsl"], auth_1.standardAuth, british_sign_language_1.default.get);
exports.candidateRouter.post(["/bsl"], auth_1.standardAuth, request_validator_1.validateRequest(british_sign_language_1.default.postSchemaValidation), british_sign_language_1.default.post);
exports.candidateRouter.get(["/payment-initiation"], auth_1.standardAuth, error_handler_1.asyncErrorHandler(payment_initiation_1.default.get));
exports.candidateRouter.get(["/payment-confirmation-loading/:bookingReference?"], auth_1.standardAuth, payment_confirmation_loading_1.default.get);
exports.candidateRouter.get(["/payment-confirmation/:bookingReference?"], payment_redirect_1.paymentRedirect, auth_1.standardAuth, error_handler_1.asyncErrorHandler(payment_confirmation_1.default.get));
exports.candidateRouter.get(["/booking-confirmation"], auth_1.commonAuth, booking_confirmation_1.default.get);
exports.candidateRouter.get(["/change-location-time"], auth_1.standardAuth, change_location_time_1.default.get);
exports.candidateRouter.post(["/change-location-time"], auth_1.standardAuth, request_validator_1.validateRequest(change_location_time_1.default.postSchema), change_location_time_1.default.post);
exports.candidateRouter.get(["/accessibility-statement"], accessibility_statement_1.default.get);
exports.candidateRouter.get(["/privacy-policy"], privacy_policy_1.default.get);
exports.candidateRouter.get(["/view-cookies"], cookie_policy_1.default.get);
exports.candidateRouter.get(["/timeout"], error_handler_1.asyncErrorHandler(error_timeout_1.default.get));
exports.candidateRouter.get(["/error-technical"], error_handler_1.asyncErrorHandler(error_technical_1.default.get));
// Candidate Tests - NSA
exports.candidateRouter.get(["/nsa/candidate-details"], auth_1.startAuth, candidate_details_1.default.get);
exports.candidateRouter.post(["/nsa/candidate-details"], auth_1.startAuth, request_validator_1.validateRequest(candidate_details_1.default.postSchemaValidation), error_handler_1.asyncErrorHandler(candidate_details_1.default.post));
exports.candidateRouter.get(["/nsa/test-type"], auth_1.supportAuth, error_handler_1.asyncErrorHandler(test_type_1.default.get));
exports.candidateRouter.post(["/nsa/test-type"], auth_1.supportAuth, request_validator_1.validateRequest(test_type_1.default.postSchemaValidation), error_handler_1.asyncErrorHandler(test_type_1.default.post));
exports.candidateRouter.get(["/nsa/received-support-request"], auth_1.supportAuth, received_support_request_1.default.get);
exports.candidateRouter.get(["/nsa/test-language"], auth_1.supportAuth, test_language_1.default.get);
exports.candidateRouter.post(["/nsa/test-language"], auth_1.supportAuth, request_validator_1.validateRequest(test_language_1.default.testLanguagePostSchema()), test_language_1.default.post);
exports.candidateRouter.get(["/nsa/select-support-type"], auth_1.supportAuth, select_support_type_1.default.get);
exports.candidateRouter.post(["/nsa/select-support-type"], auth_1.supportAuth, request_validator_1.conditionalValidateRequest(select_support_type_1.default.postSchemaValidation), select_support_type_1.default.post);
exports.candidateRouter.get(["/nsa/change-voiceover"], auth_1.supportAuth, voiceover_1.default.get);
exports.candidateRouter.post(["/nsa/change-voiceover"], auth_1.supportAuth, request_validator_1.validateRequest(voiceover_1.default.voiceoverPostSchema()), voiceover_1.default.post);
exports.candidateRouter.get(["/nsa/translator"], auth_1.supportAuth, translator_1.default.get);
exports.candidateRouter.post(["/nsa/translator"], auth_1.supportAuth, request_validator_1.validateRequest(translator_1.default.postSchemaValidation), translator_1.default.post);
exports.candidateRouter.get(["/nsa/custom-support"], auth_1.supportAuth, custom_support_1.default.get);
exports.candidateRouter.post(["/nsa/custom-support"], auth_1.supportAuth, request_validator_1.validateRequest(custom_support_1.default.postSchemaValidation()), custom_support_1.default.post);
exports.candidateRouter.get(["/nsa/confirm-support"], auth_1.supportAuth, confirm_support_1.default.get);
exports.candidateRouter.post(["/nsa/confirm-support"], auth_1.supportAuth, request_validator_1.validateRequest(confirm_support_1.default.postSchemaValidation()), confirm_support_1.default.post);
exports.candidateRouter.get(["/nsa/leaving-nsa"], auth_1.supportAuth, leaving_nsa_1.default.get);
exports.candidateRouter.post(["/nsa/leaving-nsa"], auth_1.supportAuth, error_handler_1.asyncErrorHandler(leaving_nsa_1.default.post));
exports.candidateRouter.get(["/nsa/staying-nsa"], auth_1.supportAuth, error_handler_1.asyncErrorHandler(staying_nsa_1.default.get));
exports.candidateRouter.get(["/nsa/email-contact"], auth_1.supportAuth, email_contact_1.default.get);
exports.candidateRouter.post(["/nsa/email-contact"], auth_1.supportAuth, request_validator_1.validateRequest(email_contact_1.default.postSchemaValidation()), email_contact_1.default.post);
exports.candidateRouter.get(["/nsa/preferred-day"], auth_1.supportAuth, preferred_day_1.default.get);
exports.candidateRouter.post(["/nsa/preferred-day"], auth_1.supportAuth, request_validator_1.conditionalValidateRequest(preferred_day_1.default.postSchemaValidation), preferred_day_1.default.post);
exports.candidateRouter.get(["/nsa/preferred-location"], auth_1.supportAuth, preferred_location_1.default.get);
exports.candidateRouter.post(["/nsa/preferred-location"], auth_1.supportAuth, request_validator_1.conditionalValidateRequest(preferred_location_1.default.postSchemaValidation), preferred_location_1.default.post);
exports.candidateRouter.get(["/nsa/telephone-contact"], auth_1.supportAuth, telephone_contact_1.default.get);
exports.candidateRouter.post(["/nsa/telephone-contact"], auth_1.supportAuth, request_validator_1.conditionalValidateRequest(telephone_contact_1.default.postSchemaValidation), telephone_contact_1.default.post);
exports.candidateRouter.get(["/nsa/voicemail"], auth_1.supportAuth, voicemail_1.default.get);
exports.candidateRouter.post(["/nsa/voicemail"], auth_1.supportAuth, request_validator_1.validateRequest(voicemail_1.default.postSchemaValidation()), voicemail_1.default.post);
exports.candidateRouter.get(["/nsa/check-your-details"], auth_1.supportAuth, check_your_details_1.default.get);
exports.candidateRouter.post(["/nsa/check-your-details"], auth_1.supportAuth, error_handler_1.asyncErrorHandler(check_your_details_1.default.post));
exports.candidateRouter.get(["/nsa/duplicate-support-request"], auth_1.supportAuth, duplicate_support_request_1.default.get);

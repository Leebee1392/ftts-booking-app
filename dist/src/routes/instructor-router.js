"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.instructorRouter = void 0;
/* istanbul ignore file */
const express_1 = __importDefault(require("express"));
const instructor_change_location_time_1 = __importDefault(require("../controllers/instructor-change-location-time/instructor-change-location-time"));
const booking_confirmation_1 = __importDefault(require("../controllers/booking-confirmation/booking-confirmation"));
const instructor_candidate_details_1 = __importDefault(require("../controllers/instructor-candidate-details/instructor-candidate-details"));
const choose_appointment_1 = __importDefault(require("../controllers/choose-appointment/choose-appointment"));
const support_alert_1 = __importDefault(require("../controllers/support-alert/support-alert"));
const instructor_choose_support_1 = __importDefault(require("../controllers/instructor-choose-support/instructor-choose-support"));
const email_contact_1 = __importDefault(require("../controllers/email-contact/email-contact"));
const instructor_find_test_centre_1 = __importDefault(require("../controllers/instructor-find-test-centre/instructor-find-test-centre"));
const test_language_1 = __importDefault(require("../controllers/test-language/test-language"));
const test_type_1 = __importDefault(require("../controllers/test-type/test-type"));
const received_support_request_1 = __importDefault(require("../controllers/received-support-request/received-support-request"));
const instructor_voiceover_1 = __importDefault(require("../controllers/instructor-voiceover/instructor-voiceover"));
const instructor_check_your_answers_1 = __importDefault(require("../controllers/instructor-check-your-answers/instructor-check-your-answers"));
const booking_exists_1 = __importDefault(require("../controllers/booking-exists/booking-exists"));
const payment_confirmation_1 = __importDefault(require("../controllers/payment-confirmation/payment-confirmation"));
const payment_initiation_1 = __importDefault(require("../controllers/payment-initiation/payment-initiation"));
const instructor_british_sign_language_1 = __importDefault(require("../controllers/instructor-british-sign-language/instructor-british-sign-language"));
const instructor_select_date_1 = __importDefault(require("../controllers/instructor-select-date/instructor-select-date"));
const instructor_select_test_centre_1 = __importDefault(require("../controllers/instructor-select-test-centre/instructor-select-test-centre"));
const instructor_check_your_details_1 = __importDefault(require("../controllers/instructor-check-your-details/instructor-check-your-details"));
const instructor_custom_support_1 = __importDefault(require("../controllers/instructor-custom-support/instructor-custom-support"));
const instructor_confirm_support_1 = __importDefault(require("../controllers/instructor-confirm-support/instructor-confirm-support"));
const leaving_nsa_1 = __importDefault(require("../controllers/leaving-nsa/leaving-nsa"));
const instructor_preferred_day_1 = __importDefault(require("../controllers/instructor-preferred-day/instructor-preferred-day"));
const instructor_preferred_location_1 = __importDefault(require("../controllers/instructor-preferred-location/instructor-preferred-location"));
const select_support_type_1 = __importDefault(require("../controllers/select-support-type/select-support-type"));
const duplicate_support_request_1 = __importDefault(require("../controllers/duplicate-support-request/duplicate-support-request"));
const instructor_telephone_contact_1 = __importDefault(require("../controllers/instructor-telephone-contact/instructor-telephone-contact"));
const instructor_translator_1 = __importDefault(require("../controllers/instructor-translator/instructor-translator"));
const instructor_voicemail_1 = __importDefault(require("../controllers/instructor-voicemail/instructor-voicemail"));
const select_standard_support_1 = __importDefault(require("../controllers/select-standard-support/select-standard-support"));
const error_technical_1 = __importDefault(require("../controllers/error-technical/error-technical"));
const staying_nsa_1 = __importDefault(require("../controllers/staying-nsa/staying-nsa"));
const payment_confirmation_loading_1 = __importDefault(require("../controllers/payment-confirmation-loading/payment-confirmation-loading"));
const payment_redirect_1 = require("../middleware/payment-redirect");
const set_context_1 = require("../middleware/set-context");
const internationalisation_1 = require("../middleware/internationalisation");
const setup_session_1 = require("../middleware/setup-session");
const set_target_1 = require("../middleware/set-target");
const request_validator_1 = require("../middleware/request-validator");
const error_handler_1 = require("../middleware/error-handler");
const auth_1 = require("../middleware/auth");
exports.instructorRouter = express_1.default.Router();
// Instructor Tests - Standard
exports.instructorRouter.get(["/", "/choose-support"], setup_session_1.setupSession, set_target_1.setTarget, internationalisation_1.internationalisation, set_context_1.setContext, auth_1.startAuth, instructor_choose_support_1.default.get);
exports.instructorRouter.post(["/choose-support"], request_validator_1.validateRequest(instructor_choose_support_1.default.postSchemaValidation()), instructor_choose_support_1.default.post);
exports.instructorRouter.get(["/support-alert"], auth_1.startAuth, support_alert_1.default.get);
exports.instructorRouter.post(["/support-alert"], auth_1.startAuth, support_alert_1.default.post);
exports.instructorRouter.get(["/candidate-details"], auth_1.startAuth, instructor_candidate_details_1.default.get);
exports.instructorRouter.post(["/candidate-details"], auth_1.startAuth, request_validator_1.validateRequest(instructor_candidate_details_1.default.postSchemaValidation), error_handler_1.asyncErrorHandler(instructor_candidate_details_1.default.post));
exports.instructorRouter.get(["/email-contact"], auth_1.instructorStandardAuth, email_contact_1.default.get);
exports.instructorRouter.post(["/email-contact"], auth_1.instructorStandardAuth, request_validator_1.validateRequest(email_contact_1.default.postSchemaValidation()), email_contact_1.default.post);
exports.instructorRouter.get(["/test-type"], auth_1.commonAuth, error_handler_1.asyncErrorHandler(test_type_1.default.get));
exports.instructorRouter.post(["/test-type"], auth_1.commonAuth, request_validator_1.validateRequest(test_type_1.default.postSchemaValidation), error_handler_1.asyncErrorHandler(test_type_1.default.post));
exports.instructorRouter.get(["/received-support-request"], auth_1.commonAuth, received_support_request_1.default.get);
exports.instructorRouter.get(["/test-language"], auth_1.commonAuth, test_language_1.default.get);
exports.instructorRouter.post(["/test-language"], auth_1.commonAuth, request_validator_1.validateRequest(test_language_1.default.testLanguagePostSchema()), test_language_1.default.post);
exports.instructorRouter.get(["/find-test-centre"], auth_1.instructorStandardAuth, instructor_find_test_centre_1.default.get);
exports.instructorRouter.post(["/find-test-centre"], auth_1.instructorStandardAuth, request_validator_1.validateRequest(instructor_find_test_centre_1.default.postSchemaValidation), instructor_find_test_centre_1.default.post);
exports.instructorRouter.get(["/select-test-centre"], auth_1.instructorStandardAuth, request_validator_1.validateRequest(instructor_select_test_centre_1.default.getSchemaValidation()), error_handler_1.asyncErrorHandler(instructor_select_test_centre_1.default.get));
exports.instructorRouter.post(["/select-test-centre"], auth_1.instructorStandardAuth, request_validator_1.validateRequest(instructor_select_test_centre_1.default.postSchemaValidation()), error_handler_1.asyncErrorHandler(instructor_select_test_centre_1.default.post));
exports.instructorRouter.get(["/select-date"], auth_1.instructorStandardAuth, instructor_select_date_1.default.get);
exports.instructorRouter.post(["/select-date"], auth_1.instructorStandardAuth, request_validator_1.validateRequest(instructor_select_date_1.default.postSchemaValidation), instructor_select_date_1.default.post);
exports.instructorRouter.get(["/choose-appointment"], auth_1.instructorStandardAuth, request_validator_1.validateRequest(choose_appointment_1.default.getSchemaValidation), error_handler_1.asyncErrorHandler(choose_appointment_1.default.get));
exports.instructorRouter.post(["/choose-appointment"], auth_1.instructorStandardAuth, request_validator_1.validateRequest(choose_appointment_1.default.postSchemaValidation), error_handler_1.asyncErrorHandler(choose_appointment_1.default.post));
exports.instructorRouter.get(["/check-your-answers"], auth_1.instructorStandardAuth, instructor_check_your_answers_1.default.get);
exports.instructorRouter.post(["/check-your-answers"], auth_1.instructorStandardAuth, error_handler_1.asyncErrorHandler(instructor_check_your_answers_1.default.post));
exports.instructorRouter.get(["/booking-exists"], auth_1.instructorStandardAuth, booking_exists_1.default.get);
exports.instructorRouter.get(["/bsl"], auth_1.instructorStandardAuth, instructor_british_sign_language_1.default.get);
exports.instructorRouter.post(["/bsl"], auth_1.instructorStandardAuth, request_validator_1.validateRequest(instructor_british_sign_language_1.default.postSchemaValidation), instructor_british_sign_language_1.default.post);
exports.instructorRouter.get(["/payment-initiation"], auth_1.instructorStandardAuth, error_handler_1.asyncErrorHandler(payment_initiation_1.default.get));
exports.instructorRouter.get(["/payment-confirmation-loading/:bookingReference?"], auth_1.instructorStandardAuth, payment_confirmation_loading_1.default.get);
exports.instructorRouter.get(["/payment-confirmation/:bookingReference?"], payment_redirect_1.paymentRedirect, auth_1.instructorStandardAuth, error_handler_1.asyncErrorHandler(payment_confirmation_1.default.get));
exports.instructorRouter.get(["/booking-confirmation"], auth_1.commonAuth, booking_confirmation_1.default.get);
exports.instructorRouter.get(["/change-location-time"], auth_1.instructorStandardAuth, instructor_change_location_time_1.default.get);
exports.instructorRouter.get(["/select-standard-support"], auth_1.commonAuth, select_standard_support_1.default.get);
exports.instructorRouter.post(["/select-standard-support"], auth_1.commonAuth, request_validator_1.validateRequest(select_standard_support_1.default.postSchemaValidation()), select_standard_support_1.default.post);
exports.instructorRouter.post(["/change-location-time"], auth_1.instructorStandardAuth, request_validator_1.validateRequest(instructor_change_location_time_1.default.postSchema), instructor_change_location_time_1.default.post);
exports.instructorRouter.get(["/change-voiceover"], auth_1.instructorStandardAuth, instructor_voiceover_1.default.get);
exports.instructorRouter.post(["/change-voiceover"], auth_1.instructorStandardAuth, request_validator_1.validateRequest(instructor_voiceover_1.default.voiceoverPostSchema()), instructor_voiceover_1.default.post);
exports.instructorRouter.get(["/error-technical"], error_handler_1.asyncErrorHandler(error_technical_1.default.get));
// Instructor Tests - NSA
exports.instructorRouter.get(["/nsa/candidate-details"], setup_session_1.setupSession, set_target_1.setTarget, internationalisation_1.internationalisation, set_context_1.setContext, auth_1.startAuth, instructor_candidate_details_1.default.get);
exports.instructorRouter.post(["/nsa/candidate-details"], auth_1.startAuth, request_validator_1.validateRequest(instructor_candidate_details_1.default.postSchemaValidation), error_handler_1.asyncErrorHandler(instructor_candidate_details_1.default.post));
exports.instructorRouter.get(["/nsa/test-type"], auth_1.supportAuth, error_handler_1.asyncErrorHandler(test_type_1.default.get));
exports.instructorRouter.post(["/nsa/test-type"], auth_1.supportAuth, request_validator_1.validateRequest(test_type_1.default.postSchemaValidation), error_handler_1.asyncErrorHandler(test_type_1.default.post));
exports.instructorRouter.get(["/nsa/received-support-request"], auth_1.supportAuth, received_support_request_1.default.get);
exports.instructorRouter.get(["/nsa/test-language"], auth_1.supportAuth, test_language_1.default.get);
exports.instructorRouter.post(["/nsa/test-language"], auth_1.supportAuth, request_validator_1.validateRequest(test_language_1.default.testLanguagePostSchema()), test_language_1.default.post);
exports.instructorRouter.get(["/nsa/select-support-type"], auth_1.supportAuth, select_support_type_1.default.get);
exports.instructorRouter.post(["/nsa/select-support-type"], auth_1.supportAuth, request_validator_1.conditionalValidateRequest(select_support_type_1.default.postSchemaValidation), select_support_type_1.default.post);
exports.instructorRouter.get(["/nsa/change-voiceover"], auth_1.supportAuth, instructor_voiceover_1.default.get);
exports.instructorRouter.post(["/nsa/change-voiceover"], auth_1.supportAuth, request_validator_1.validateRequest(instructor_voiceover_1.default.voiceoverPostSchema()), instructor_voiceover_1.default.post);
exports.instructorRouter.get(["/nsa/translator"], auth_1.supportAuth, instructor_translator_1.default.get);
exports.instructorRouter.post(["/nsa/translator"], auth_1.supportAuth, request_validator_1.validateRequest(instructor_translator_1.default.postSchemaValidation), instructor_translator_1.default.post);
exports.instructorRouter.get(["/nsa/custom-support"], auth_1.supportAuth, instructor_custom_support_1.default.get);
exports.instructorRouter.post(["/nsa/custom-support"], auth_1.supportAuth, request_validator_1.validateRequest(instructor_custom_support_1.default.postSchemaValidation()), instructor_custom_support_1.default.post);
exports.instructorRouter.get(["/nsa/confirm-support"], auth_1.supportAuth, instructor_confirm_support_1.default.get);
exports.instructorRouter.post(["/nsa/confirm-support"], auth_1.supportAuth, request_validator_1.validateRequest(instructor_confirm_support_1.default.postSchemaValidation()), instructor_confirm_support_1.default.post);
exports.instructorRouter.get(["/nsa/leaving-nsa"], auth_1.supportAuth, leaving_nsa_1.default.get);
exports.instructorRouter.post(["/nsa/leaving-nsa"], auth_1.supportAuth, error_handler_1.asyncErrorHandler(leaving_nsa_1.default.post));
exports.instructorRouter.get(["/nsa/staying-nsa"], auth_1.supportAuth, error_handler_1.asyncErrorHandler(staying_nsa_1.default.get));
exports.instructorRouter.get(["/nsa/email-contact"], auth_1.supportAuth, email_contact_1.default.get);
exports.instructorRouter.post(["/nsa/email-contact"], auth_1.supportAuth, request_validator_1.validateRequest(email_contact_1.default.postSchemaValidation()), email_contact_1.default.post);
exports.instructorRouter.get(["/nsa/preferred-day"], auth_1.supportAuth, instructor_preferred_day_1.default.get);
exports.instructorRouter.post(["/nsa/preferred-day"], auth_1.supportAuth, request_validator_1.conditionalValidateRequest(instructor_preferred_day_1.default.postSchemaValidation), instructor_preferred_day_1.default.post);
exports.instructorRouter.get(["/nsa/preferred-location"], auth_1.supportAuth, instructor_preferred_location_1.default.get);
exports.instructorRouter.post(["/nsa/preferred-location"], auth_1.supportAuth, request_validator_1.conditionalValidateRequest(instructor_preferred_location_1.default.postSchemaValidation), instructor_preferred_location_1.default.post);
exports.instructorRouter.get(["/nsa/telephone-contact"], auth_1.supportAuth, instructor_telephone_contact_1.default.get);
exports.instructorRouter.post(["/nsa/telephone-contact"], auth_1.supportAuth, request_validator_1.conditionalValidateRequest(instructor_telephone_contact_1.default.postSchemaValidation), instructor_telephone_contact_1.default.post);
exports.instructorRouter.get(["/nsa/voicemail"], auth_1.supportAuth, instructor_voicemail_1.default.get);
exports.instructorRouter.post(["/nsa/voicemail"], auth_1.supportAuth, request_validator_1.validateRequest(instructor_voicemail_1.default.postSchemaValidation()), instructor_voicemail_1.default.post);
exports.instructorRouter.get(["/nsa/check-your-details"], auth_1.supportAuth, instructor_check_your_details_1.default.get);
exports.instructorRouter.post(["/nsa/check-your-details"], auth_1.supportAuth, error_handler_1.asyncErrorHandler(instructor_check_your_details_1.default.post));
exports.instructorRouter.get(["/nsa/duplicate-support-request"], auth_1.supportAuth, duplicate_support_request_1.default.get);

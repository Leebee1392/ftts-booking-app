"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.manageBookingRouter = void 0;
/* istanbul ignore file */
const express_1 = __importDefault(require("express"));
const manage_booking_login_1 = __importDefault(require("../controllers/manage-booking-login/manage-booking-login"));
const manage_booking_home_1 = __importDefault(require("../controllers/manage-booking-home/manage-booking-home"));
const manage_booking_change_1 = __importDefault(require("../controllers/manage-booking-change/manage-booking-change"));
const manage_booking_cancel_1 = __importDefault(require("../controllers/manage-booking-cancel/manage-booking-cancel"));
const manage_booking_check_change_1 = __importDefault(require("../controllers/manage-booking-check-change/manage-booking-check-change"));
const manage_booking_request_refund_1 = __importDefault(require("../controllers/manage-booking-request-refund/manage-booking-request-refund"));
const voiceover_1 = __importDefault(require("../controllers/voiceover/voiceover"));
const change_location_time_1 = __importDefault(require("../controllers/change-location-time/change-location-time"));
const select_date_1 = __importDefault(require("../controllers/select-date/select-date"));
const choose_appointment_1 = __importDefault(require("../controllers/choose-appointment/choose-appointment"));
const find_test_centre_1 = __importDefault(require("../controllers/find-test-centre/find-test-centre"));
const select_test_centre_1 = __importDefault(require("../controllers/select-test-centre/select-test-centre"));
const test_language_1 = __importDefault(require("../controllers/test-language/test-language"));
const british_sign_language_1 = __importDefault(require("../controllers/british-sign-language/british-sign-language"));
const error_technical_1 = __importDefault(require("../controllers/error-technical/error-technical"));
const manage_booking_check_your_details_1 = __importDefault(require("../controllers/manage-booking-check-your-details/manage-booking-check-your-details"));
const setup_session_1 = require("../middleware/setup-session");
const set_context_1 = require("../middleware/set-context");
const internationalisation_1 = require("../middleware/internationalisation");
const set_target_1 = require("../middleware/set-target");
const request_validator_1 = require("../middleware/request-validator");
const error_handler_1 = require("../middleware/error-handler");
const auth_1 = require("../middleware/auth");
exports.manageBookingRouter = express_1.default.Router();
exports.manageBookingRouter.get(["/", "/login"], setup_session_1.setupSession, set_target_1.setTarget, internationalisation_1.internationalisation, set_context_1.setContext, manage_booking_login_1.default.get);
exports.manageBookingRouter.post(["/login"], request_validator_1.validateRequest(manage_booking_login_1.default.postSchemaValidation), error_handler_1.asyncErrorHandler(manage_booking_login_1.default.post));
exports.manageBookingRouter.get(["/home"], auth_1.manageBookingHomeAuth, error_handler_1.asyncErrorHandler(manage_booking_home_1.default.get));
exports.manageBookingRouter.get(["/manage-change-location-time/:ref"], change_location_time_1.default.get);
exports.manageBookingRouter.post(["/manage-change-location-time/:ref"], request_validator_1.validateRequest(change_location_time_1.default.postSchema), change_location_time_1.default.post);
exports.manageBookingRouter.get(["/choose-appointment"], auth_1.manageReschedulingAuth, request_validator_1.validateRequest(choose_appointment_1.default.getSchemaValidation), error_handler_1.asyncErrorHandler(choose_appointment_1.default.get));
exports.manageBookingRouter.post(["/choose-appointment"], auth_1.manageReschedulingAuth, request_validator_1.validateRequest(choose_appointment_1.default.postSchemaValidation), error_handler_1.asyncErrorHandler(choose_appointment_1.default.post));
exports.manageBookingRouter.get(["/select-date"], auth_1.manageReschedulingAuth, select_date_1.default.get);
exports.manageBookingRouter.post(["/select-date"], auth_1.manageReschedulingAuth, request_validator_1.validateRequest(select_date_1.default.postSchemaValidation), select_date_1.default.post);
exports.manageBookingRouter.get(["/find-test-centre"], auth_1.manageReschedulingAuth, find_test_centre_1.default.get);
exports.manageBookingRouter.post(["/find-test-centre"], auth_1.manageReschedulingAuth, request_validator_1.validateRequest(find_test_centre_1.default.postSchemaValidation), find_test_centre_1.default.post);
exports.manageBookingRouter.get(["/select-test-centre"], auth_1.manageReschedulingAuth, request_validator_1.validateRequest(select_test_centre_1.default.getSchemaValidation()), error_handler_1.asyncErrorHandler(select_test_centre_1.default.get));
exports.manageBookingRouter.post(["/select-test-centre"], auth_1.manageReschedulingAuth, request_validator_1.validateRequest(select_test_centre_1.default.postSchemaValidation()), select_test_centre_1.default.post);
exports.manageBookingRouter.get(["/check-change"], auth_1.manageReschedulingAuth, manage_booking_check_change_1.default.get);
exports.manageBookingRouter.post(["/check-change"], auth_1.manageReschedulingAuth, error_handler_1.asyncErrorHandler(manage_booking_check_change_1.default.post));
exports.manageBookingRouter.get(["/check-change/reset"], auth_1.manageReschedulingAuth, manage_booking_check_change_1.default.reset);
exports.manageBookingRouter.get(["/test-language"], auth_1.manageReschedulingAuth, test_language_1.default.get);
exports.manageBookingRouter.post(["/test-language"], auth_1.manageReschedulingAuth, request_validator_1.validateRequest(test_language_1.default.testLanguagePostSchema()), test_language_1.default.post);
exports.manageBookingRouter.get(["/change-voiceover"], auth_1.manageReschedulingAuth, voiceover_1.default.get);
exports.manageBookingRouter.post(["/change-voiceover"], auth_1.manageReschedulingAuth, request_validator_1.validateRequest(voiceover_1.default.voiceoverPostSchema()), voiceover_1.default.post);
exports.manageBookingRouter.get(["/bsl"], auth_1.manageReschedulingAuth, british_sign_language_1.default.get);
exports.manageBookingRouter.post(["/bsl"], auth_1.manageReschedulingAuth, request_validator_1.validateRequest(british_sign_language_1.default.postSchemaValidation), british_sign_language_1.default.post);
exports.manageBookingRouter.get(["/request-refund"], auth_1.manageBookingHomeAuth, manage_booking_request_refund_1.default.get);
exports.manageBookingRouter.post(["/request-refund"], auth_1.manageBookingHomeAuth, error_handler_1.asyncErrorHandler(manage_booking_request_refund_1.default.post));
exports.manageBookingRouter.get(["/:ref"], auth_1.manageBookingViewAuth, error_handler_1.asyncErrorHandler(manage_booking_change_1.default.get));
exports.manageBookingRouter.get(["/:ref/cancel"], auth_1.manageBookingViewAuth, manage_booking_cancel_1.default.get);
exports.manageBookingRouter.post(["/:ref/cancel"], auth_1.manageBookingViewAuth, error_handler_1.asyncErrorHandler(manage_booking_cancel_1.default.post));
exports.manageBookingRouter.get(["/error-technical"], error_handler_1.asyncErrorHandler(error_technical_1.default.get));
exports.manageBookingRouter.get(["/nsa/check-your-details"], auth_1.manageBookingNsaAuth, manage_booking_check_your_details_1.default.get);
exports.manageBookingRouter.post(["/nsa/check-your-details"], auth_1.manageBookingNsaAuth, manage_booking_check_your_details_1.default.post);
